package eblcg;
//polar coordinates this time (r, theta)
public class Star {
	//some properties
	int rings = 0; //number of rings to divide into, will be initialized
	double dr = 0;
	int sectors = 0; //number of sectors to divide into, will be initialized
	double dth = 0; //d-theta
	double radius = 1000;
	double temperature = 0;
	double starBrightness = 0;
	double area = 0;
	
	double component[][];
	
	double sumTemp = 0;
	
	public Star(int rings, int sectors, int radius, int temperature){
		this.rings = rings;
		this.sectors = sectors;
		this.radius = radius;
		this.temperature = temperature;
		
		initStar();
	}
	
	public void initStar(){
		component = new double[rings][sectors];
		dr = radius/rings;
		dth = Math.PI/sectors;
		area = radius*radius*Math.PI;
		//stefan-boltzman law and dived by two because only seeing half of the star
		starBrightness = Math.pow(temperature, 4)*4*Math.PI*radius*radius*Math.pow(5.670373, -8)/2; 
		double ringBrightness = 0;
		//Because the ring gets larger as radius increases, the brightness assigned to the rings need to be proportional
		for(int ringCounter=0; ringCounter<rings; ringCounter++){
			ringBrightness = starBrightness*(Math.pow(dr*(ringCounter+1),2)*Math.PI - Math.pow(dr*(ringCounter),2)*Math.PI)/area/sectors;
			for(int sectorCounter=0; sectorCounter<sectors; sectorCounter++){
				//System.out.println(ringCounter + "\t" + sectorCounter);
				component[ringCounter][sectorCounter] = ringBrightness;
				sumTemp += ringBrightness;
			}
		}
		System.out.println(starBrightness);
		System.out.println(sumTemp);
	}
}
